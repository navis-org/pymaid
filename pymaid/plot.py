"""
    This script is part of pymaid (http://www.github.com/schlegelp/pymaid).
    Copyright (C) 2017 Philipp Schlegel

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along
"""

import matplotlib.pyplot as plt
import matplotlib.lines as mlines
import random, colorsys, logging
from matplotlib.patches import Polygon, Circle
from matplotlib.collections import PatchCollection

import plotly.plotly as py
import plotly.offline as pyoff
import plotly.graph_objs as go
import pandas as pd
import numpy as np
import random
import math

try:
   from pymaid import get_3D_skeleton, get_names, get_volume
except:
   from pymaid.pymaid import get_3D_skeleton, get_names, get_volume

try:
   import morpho, igraph_catmaid
   import cluster as clustmaid
except:
   from pymaid import morpho, igraph_catmaid
   from pymaid import cluster as clustmaid

#If plotneuron is not run as module, make sure module_logger has a at least a StreamHandler
module_logger = logging.getLogger(__name__)
module_logger.setLevel(logging.INFO)
if not module_logger.handlers:
   sh = logging.StreamHandler()
   sh.setLevel(logging.DEBUG)
   #Create formatter and add it to the handlers
   formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
   sh.setFormatter(formatter)
   module_logger.addHandler(sh)

def plot2d( *args, **kwargs ):
   """
   Retrieves 3D skeletons and generates matplotlib object.
   Currently plots only frontal view (x,y axes).
   X and y limits have been set to fit the adult EM volume -> adjust if necessary.

   Parameters:
   ----------
   Provide neurons by using either one of the following kwargs

   skids :           list or single skid
   skdata :          skeleton data as retrieved by pymaid.get_3D_skeleton()
   remote_instance : Catmaid Instance - need this too if you are passing only
                     skids
   project_id :      default is 1

   Examples:

   1. Plot two neurons and have plot2d download the skeleton data for you
        fig, ax = plot.plot2d( skids = [12345, 45567], remote_instance = rm )
        matplotlib.pyplot.show()

   2. Manually download a neuron, modify it and plot it
        skdata = pymaid.get_3D_skeleton( [12345], rm )
        dist, prox = morpho.cut_neuron( skdata.ix[0], treenode_id = 4567 )
        fig, ax = plot.plot2d( skdata = dist )
        matplotlib.pyplot.show()

   Other (optional) arguments:
   connectors :      boolean (default = True)
                     Plot connectors (synapses, gap junctions, abutting)
   connectors_only : boolean (default = False)
                     Plot only connectors, not the neuron
   zoom :            boolean (default = False)
                     Zoom in on higher brain centers
   auto_limits :     boolean (default = True)
                     by default, limits are being calculated such that they
                     fit the neurons plotted.
   limits :          dict (default = None)
                     Manually override limits for plot. Dict needs to define
                     min and max values for each axis:
                     { 'x' : [ int, int ], 'y' : [ int, int ] }

                     If auto_limits = False and limits = None, a hard-coded
                     fallback is used - this may not suit your needs!

   Neuropils included for FAFB(v13)
   ---------
   Neuropil names can be passed either as *args or as **kwargs. Passing them as
   *args will cause them to be plotted in gray; passing neuropil names as **kwargs
   will render them in the provided color.

   For example:
   plot.plot2d(   skids = [ 12346 ],
                  remote_instance = rm,
                  'brain' = (1,0,0),
                  'MB' =  (0,1,0) )
      -> plots brain in red, and mushroom body in green

   plot.plot2d(   skids = [ 12346 ],
                  remote_instance = rm,
                  *['brain', 'MB'] )
      -> plots brain and mushroom body in grey

   Currently, the following neuropils are included:
   brain, MB, LH, AL, SLP, SIP, CRE

   If you want additional neuropils or work on a different project: feel free to
   contact me to find out how to add more.


   Returns:
   --------
   fig, ax :         matplotlib figure and axe object
   """

   #Here, we define 2d outlines brain meshes/neuropils:
   brain = [(571757, -169305), (562337, -165537), (546490, -164097), (534964, -163653), (525877, -161215), (521001, -162878), (502161, -159775), (483654, -161658), (467586, -165426), (444978, -173295), (431347, -185596), (422592, -196124), (409072, -202551), (401204, -208425), (395774, -217734), (395331, -226710), (400872, -239011), (410735, -247212), (423479, -254858), (425474, -256742), (420487, -259291), (412508, -255413), (401093, -251534), (390676, -252531), (382143, -244109), (376159, -235022), (369842, -231697), (355546, -228594), (331166, -232473), (300025, -244109), (290273, -250315), (279856, -262394), (267998, -282009), (265782, -294311), (261127, -309493), (260462, -320132), (257470, -340855), (260241, -359362), (264895, -377869), (275756, -399479), (289386, -418429), (303682, -432504), (319419, -442699), (335044, -451011), (352887, -455665), (365298, -457438), (382697, -454224), (394998, -447797), (403531, -438709), (414613, -431285), (418825, -422973), (431237, -416213), (440545, -406904), (451184, -401031), (463485, -386956), (467696, -373658), (479776, -384075), (491744, -393051), (509919, -400144), (513909, -410561), (515017, -420646), (526985, -431395), (550701, -444029), (556685, -445802), (568875, -444694), (583171, -447686), (600238, -447021), (619853, -449237), (636698, -447686), (644012, -449348), (650772, -448905), (678920, -437269), (690667, -423970), (696541, -408788), (699311, -402250), (708398, -397373), (719702, -387621), (740758, -373880), (744637, -373325), (742642, -384186), (744526, -395046), (750953, -404577), (759487, -413997), (768352, -419538), (772896, -420092), (782648, -428957), (783867, -434277), (796722, -447021), (803815, -455887), (818221, -465417), (830855, -470182), (840386, -471180), (863325, -468742), (883716, -460763), (910646, -443807), (929596, -423305), (945665, -399812), (955860, -372993), (958631, -343958), (954198, -318358), (943227, -293978), (927158, -274695), (907432, -259513), (883938, -247433), (861109, -244663), (844264, -247766), (831963, -257961), (827530, -266162), (819108, -266495), (801598, -273698), (792733, -283893), (787413, -279128), (780321, -275249), (780210, -272922), (784754, -266162), (802042, -255412), (810464, -245882), (813345, -236905), (810575, -224715), (800379, -212525), (791514, -206541), (778880, -201332), (771677, -192799), (753059, -179500), (735217, -168973), (711280, -163875), (692329, -163764), (679807, -167532), (658197, -170635), (632486, -171078), (616196, -177727), (611098, -181606), (598021, -184155), (591150, -183047), (583171, -176398)]
   hole = [(601774, -302587), (604265, -304709), (608786, -311906), (608786, -322239), (616536, -334602), (618565, -344197), (618381, -349548), (609524, -365048), (595592, -364218), (593378, -362003), (591994, -354622), (588765, -342998), (589503, -334694), (591348, -321501), (591348, -310891), (595961, -306739)]

   mb_r = [(494179, -267958), (489407, -265365), (485018, -261854), (480788, -259175), (478389, -256572), (477806, -253012), (476224, -249180), (475123, -247459), (476672, -246722), (479377, -245906), (483125, -244562), (487259, -242718), (490229, -240720), (492581, -239546), (494620, -238198), (497004, -235320), (498119, -231909), (499743, -227288), (502761, -221717), (504567, -217836), (505822, -214360), (506402, -209483), (506716, -205165), (507209, -202111), (507293, -199342), (506653, -195494), (504752, -191313), (503048, -188824), (499977, -186969), (496028, -186000), (494015, -185334), (492506, -184129), (491565, -180905), (492263, -176966), (495178, -174202), (498174, -173048), (503304, -171891), (508753, -168864), (510715, -166989), (513241, -165234), (515019, -163736), (517558, -162727), (522427, -160388), (525883, -159219), (529192, -159184), (532559, -159448), (535359, -162205), (538423, -165342), (539665, -168113), (539420, -170567), (539112, -171763), (537983, -173521), (535287, -176634), (531682, -181259), (529571, -187453), (529721, -194268), (529357, -198559), (527673, -200625), (526443, -203904), (526117, -206231), (525518, -209587), (524537, -214434), (524306, -219440), (525627, -223885), (527273, -225158), (528264, -225893), (531714, -228291), (536603, -230327), (541980, -230328), (546612, -229945), (549974, -228771), (552941, -227261), (555752, -226237), (558540, -225688), (561927, -226565), (566608, -226476), (571676, -226310), (577562, -226400), (583225, -224801), (586650, -222948), (588840, -223490), (590641, -226645), (593068, -230569), (595960, -234468), (596182, -238313), (596300, -243890), (596602, -248128), (594241, -252418), (594434, -258501), (595242, -264252), (593240, -269608), (591574, -273149), (587594, -275032), (581299, -275929), (575531, -277021), (571942, -276857), (568588, -274366), (564367, -272036), (561449, -269337), (558271, -265988), (552182, -262863), (545840, -260782), (540994, -261564), (537209, -264058), (534927, -264781), (531404, -264307), (527686, -264608), (522180, -265277), (517117, -266294), (515167, -268801), (511999, -269881), (507865, -269811), (504445, -270480), (501819, -270355), (499352, -269912), (497465, -268773), (495307, -267971), (491859, -267297), (487052, -263204), (483025, -260712), (479009, -257657), (478223, -255248), (477140, -250708), (475428, -248180), (475480, -246984), (478152, -246440), (480862, -245240), (485485, -243759), (488742, -241639), (491562, -240008), (493522, -239041), (495805, -236973), (497886, -233534), (498480, -229982), (501356, -224357), (503864, -219499), (505132, -216274), (506343, -212096), (506394, -207010), (507082, -203635), (507233, -200659), (507171, -197756), (505819, -193148), (503735, -189901), (502020, -187905), (497714, -186254), (494826, -185821), (493330, -184712), (491823, -183042), (491716, -178590), (493364, -175636), (497013, -173171), (499869, -172925), (506819, -170389), (509815, -167626), (511757, -166382), (514538, -164151), (515690, -163443), (520009, -161678), (524493, -159390), (527236, -159331), (531163, -159111), (533814, -160408), (536970, -164097), (539420, -166495), (539538, -169652), (539287, -171168), (538732, -172499), (536843, -174882), (533504, -178764), (530234, -184146), (529474, -190915), (529840, -196990), (528545, -199572), (526916, -201982), (526197, -205589), (525969, -207130), (524972, -212417), (524290, -216491), (524709, -222249), (526626, -224729), (527756, -225453), (529387, -226749), (534401, -229742), (538927, -230403), (544847, -230158), (548060, -229534), (551790, -227924), (554054, -226719), (557445, -225873), (559785, -225860), (564393, -227029), (568920, -225903), (574637, -226781), (580432, -225597), (585458, -223942), (587533, -222553), (590050, -225080), (591389, -228403), (594863, -232729), (596389, -236194), (595948, -240865), (596697, -246580), (595841, -249689), (593279, -255595), (595742, -261324), (594039, -267081), (592525, -271681), (590044, -274203), (584565, -275614), (578165, -276292), (573442, -277435), (570501, -275697), (566458, -273076), (562601, -270904), (560231, -267608), (555582, -264424), (548718, -261563), (543336, -260717), (538917, -262839), (535877, -264833), (533666, -264430), (529093, -264378), (525832, -264930), (518638, -265712), (516373, -267248), (513656, -269997), (510101, -269478), (505808, -270329), (503281, -270433), (500397, -270198), (498452, -269452), (496950, -268378)]
   mb_l = [(659236, -265281), (654854, -265559), (651267, -266349), (649199, -265161), (644333, -263835), (639242, -264334), (636343, -265172), (633037, -267062), (627722, -271016), (622039, -275598), (617639, -279508), (613492, -281360), (609125, -279541), (603668, -276740), (598335, -273532), (595020, -269455), (593822, -265777), (593847, -262690), (597149, -259244), (599067, -253910), (596993, -249748), (595260, -246986), (594415, -241889), (594383, -236183), (594703, -233198), (597444, -229310), (599982, -225228), (602475, -224691), (606940, -225843), (612552, -226200), (617940, -225269), (621583, -224933), (627452, -225921), (634489, -228065), (638647, -229806), (641287, -231224), (644638, -232723), (647653, -234087), (651080, -233896), (655160, -233669), (659270, -233199), (663223, -232839), (666944, -232958), (671210, -231057), (673790, -225768), (674086, -220665), (672671, -217577), (671555, -214430), (671420, -211523), (671237, -206873), (671252, -203050), (671095, -199691), (669770, -194092), (667870, -190542), (664902, -187846), (662061, -185396), (659218, -184026), (656949, -181536), (656421, -178414), (656236, -175391), (657714, -173189), (660286, -171633), (663084, -169866), (667604, -168177), (672610, -168649), (677582, -170646), (682120, -171370), (685670, -172550), (688406, -174400), (689550, -176037), (693441, -179602), (698840, -183024), (702712, -185864), (704970, -188467), (706013, -191119), (708514, -195123), (708118, -198300), (705174, -199763), (702409, -201292), (698878, -202717), (695355, -206333), (692727, -210923), (691341, -213895), (691952, -218549), (693259, -225509), (693552, -231726), (694289, -235053), (697077, -238996), (702171, -240784), (706156, -241743), (708631, -245172), (711111, -247618), (714066, -249518), (715850, -250787), (718249, -253007), (722332, -256340), (724059, -258390), (723327, -261838), (722851, -265750), (720622, -269152), (717324, -272104), (715471, -273639), (711586, -275980), (707459, -277233), (704039, -276588), (700556, -275858), (697436, -275067), (693606, -273207), (690636, -271643), (687756, -270117), (683188, -268638), (678208, -267896), (674716, -266917), (669703, -266474), (663303, -265806), (659987, -265222), (657390, -265409), (652516, -265837), (650397, -266366), (647301, -263920), (641309, -264206), (637723, -264547), (634861, -266060), (630710, -268579), (624641, -273609), (619757, -277419), (615584, -281083), (611345, -280720), (606633, -278118), (600734, -275261), (596441, -271586), (594129, -267424), (593821, -264277), (594693, -261013), (599259, -257003), (597878, -251110), (596194, -248736), (594548, -244652), (594485, -238973), (594369, -234073), (595643, -232097), (599194, -226474), (600759, -224868), (604684, -224936), (609484, -226551), (615565, -225527), (619879, -225159), (623843, -225038), (631353, -227094), (636905, -228935), (640009, -230595), (642742, -231872), (646450, -233539), (648959, -234246), (653364, -233537), (656963, -233740), (661537, -232685), (664850, -233113), (669174, -232298), (672825, -228970), (674184, -222613), (673561, -219221), (671856, -215919), (671499, -213001), (671329, -209609), (671194, -204343), (671266, -201872), (670632, -196949), (668764, -191747), (666709, -189550), (663126, -186203), (660995, -184858), (657584, -182913), (656750, -180001), (656178, -176852), (656710, -174136), (658991, -172404), (661638, -170809), (664961, -168942), (670368, -167953), (674842, -169727), (680213, -171247), (683780, -171607), (687356, -173660), (689057, -175087), (690729, -177469), (696529, -181699), (700768, -184203), (704251, -187465), (705384, -189480), (707006, -193095), (709298, -196944), (706302, -199226), (704091, -200316), (700535, -202242), (697222, -203740), (693711, -209170), (692053, -212272), (691128, -215938), (692951, -221737), (693314, -229096), (693901, -233634), (695190, -236627), (699541, -240826), (704524, -240534), (707411, -243569), (709852, -246529), (712488, -248570), (715351, -250308), (716502, -251503), (720417, -254789), (723659, -257570), (723845, -259559), (722874, -264232), (722390, -267141), (718587, -271051), (716422, -272802), (714011, -274677), (709100, -277011), (705995, -276981), (702067, -276174), (699136, -275527), (695559, -274341), (691867, -272148), (689428, -271148), (685662, -269098), (680610, -268362), (676178, -267370), (672873, -266597), (666185, -266295), (662020, -265485)]

   lh_r = [(448585, -263641), (444557, -264197), (438833, -264587), (433317, -264156), (431069, -262563), (430555, -262193), (430259, -261441), (428039, -258746), (422627, -255398), (418447, -252856), (414107, -250122), (409988, -248636), (409077, -245303), (404389, -240572), (399643, -239061), (398174, -236610), (396312, -233375), (395030, -230347), (393671, -226531), (393177, -223257), (393970, -220574), (394380, -217317), (395051, -213831), (396444, -211599), (397866, -210161), (400353, -207624), (404773, -204357), (409827, -201096), (415053, -198463), (419103, -197071), (420809, -196224), (422710, -195902), (425559, -195016), (428497, -193672), (431199, -192540), (433429, -191974), (436887, -191904), (443499, -192177), (449333, -193048), (454716, -194536), (459877, -195824), (463829, -197643), (468571, -199727), (471763, -201136), (474240, -203973), (477565, -207277), (479518, -208837), (480569, -210909), (482695, -213325), (484821, -214716), (485125, -216708), (484507, -219178), (484829, -221056), (486927, -224733), (488441, -228892), (486078, -232579), (483719, -237090), (481833, -239657), (478961, -242074), (475899, -244225), (472478, -244925), (467631, -247792), (462823, -251962), (459709, -255192), (458147, -256655), (456924, -258146), (453154, -261051), (449580, -263080), (446583, -264340), (442108, -264012), (435610, -264957), (431842, -263065), (430730, -262367), (430434, -261924), (429603, -260473), (425676, -256856), (419885, -254142), (416968, -251522), (411301, -249033), (409478, -247777), (407732, -242479), (401031, -239470), (399073, -238417), (397176, -234607), (395593, -232195), (394448, -228302), (393109, -224896), (393566, -221766), (394278, -219239), (394547, -215339), (395735, -212637), (397160, -210759), (398838, -209288), (402350, -205778), (407354, -202938), (412343, -199411), (417469, -197826), (420151, -196452), (421516, -196127), (424141, -195536), (427000, -194381), (429935, -193016), (432345, -192205), (434820, -191866), (439743, -192027), (447060, -192477), (451492, -193774), (457884, -195248), (461568, -196533), (466288, -198820), (470466, -200466), (472880, -202163), (475812, -205900), (478975, -208218), (479835, -209584), (481572, -212321), (483818, -214073), (485368, -215509), (484651, -218027), (484598, -220181), (485504, -222382), (488204, -227206), (487709, -230461), (484448, -234904), (483109, -238791), (480311, -240486), (477564, -243596), (474144, -244491), (470456, -245901), (464816, -250009), (461254, -253680), (458553, -256262), (457826, -257055), (455386, -259590), (451865, -261785)]
   lh_l = [(787744, -266824), (784667, -269724), (781528, -273136), (779127, -274273), (775765, -274214), (771560, -273791), (767983, -272804), (763606, -271986), (758778, -270978), (755480, -269668), (751346, -268275), (747368, -263600), (744904, -258006), (743553, -254842), (743633, -253292), (743539, -251902), (741809, -248265), (739778, -244703), (738313, -241422), (734743, -237995), (730710, -234869), (726458, -231655), (723176, -229423), (722633, -227373), (723334, -224842), (724889, -222084), (726532, -220124), (728503, -219182), (731801, -217269), (733991, -213035), (735942, -208547), (738560, -205802), (740275, -203148), (743373, -199908), (747167, -197717), (750117, -196632), (753734, -198101), (759809, -198842), (766799, -198273), (772417, -199421), (777016, -201026), (779716, -201807), (782771, -202177), (785887, -203256), (786646, -204215), (790062, -205373), (793648, -206175), (794646, -208003), (799232, -212177), (805423, -215802), (808434, -219132), (811303, -223007), (814683, -228963), (815189, -234455), (814733, -238959), (813435, -244014), (811637, -246616), (809703, -249910), (806897, -253517), (802636, -256548), (796872, -261270), (791672, -265166), (788392, -266642), (786327, -267730), (782991, -271845), (780248, -273858), (777766, -274389), (773554, -273948), (769724, -273493), (766043, -272157), (761057, -271767), (756882, -270114), (753870, -269202), (748861, -266528), (746253, -260442), (743833, -256177), (743630, -253910), (743592, -252714), (743077, -250529), (740465, -246020), (739232, -243457), (736867, -239351), (732502, -236714), (728863, -233002), (724296, -230554), (722742, -228338), (722835, -226288), (724046, -223339), (725754, -221028), (727392, -219475), (729945, -218646), (733379, -215311), (734543, -210695), (737508, -206834), (739386, -204793), (741510, -201357), (745410, -198721), (748713, -196990), (751688, -196912), (756395, -199108), (763452, -198248), (769802, -198727), (774777, -200230), (778781, -201617), (780739, -201895), (784818, -202637), (786368, -203845), (787589, -204635), (792578, -206021), (794071, -206585), (796117, -210008), (802748, -214209), (807303, -217322), (809530, -221079), (813204, -225456), (815444, -232355), (814694, -236308), (814562, -241747), (812182, -245667), (811057, -247738), (808130, -252160), (805299, -254730), (799597, -258789), (794288, -263545), (790355, -265813)]

   al_r = [(571713, -357107), (567957, -358531), (565686, -359825), (564167, -359867), (562272, -359754), (558501, -360476), (553372, -361144), (549241, -363858), (546257, -366509), (544860, -366498), (542856, -367266), (539898, -368470), (536821, -369449), (533021, -369342), (530404, -368184), (529796, -367207), (527625, -365388), (523463, -361567), (519849, -358672), (515505, -357251), (508847, -354267), (502959, -350581), (499978, -347726), (498108, -344189), (495445, -341201), (493584, -340116), (491454, -337305), (487959, -333208), (486098, -330574), (486040, -328719), (486317, -326899), (487866, -324186), (490318, -320021), (490111, -313540), (488242, -305774), (487602, -299857), (488568, -295061), (490620, -290603), (492079, -287962), (494459, -286503), (497227, -284493), (498176, -282969), (498805, -280856), (502058, -276097), (505819, -271767), (509465, -269519), (515450, -269850), (521980, -270545), (527588, -270011), (532032, -269283), (538093, -270113), (544481, -273856), (547586, -276345), (550438, -276232), (554848, -275169), (559580, -274844), (564219, -275349), (567719, -276117), (569621, -277892), (571835, -279979), (574438, -281772), (577184, -283300), (580171, -284648), (582696, -285878), (585202, -288177), (587173, -290386), (589548, -291956), (591954, -295486), (592951, -298302), (593236, -299788), (594265, -302973), (594779, -307122), (594342, -310519), (595008, -314124), (594974, -318609), (594662, -323587), (594435, -327195), (592576, -331211), (590293, -337709), (588821, -342033), (587948, -344818), (585709, -347896), (581239, -351485), (575981, -355273), (572560, -356943), (569926, -357626), (566358, -359403), (565202, -359933), (563038, -359762), (561037, -359954), (555625, -360983), (551369, -361817), (547401, -365884), (545511, -366469), (544058, -366721), (541416, -367921), (538351, -368964), (535110, -369662), (531228, -368759), (530082, -367654), (529119, -366550), (525634, -363725), (521429, -359639), (518086, -358072), (512346, -356039), (505541, -352319), (501105, -349050), (499130, -346231), (496888, -342285), (494202, -340593), (492899, -339207), (489667, -335082), (486658, -331700), (485988, -329642), (486175, -327805), (486776, -325769), (489181, -322240), (490789, -317223), (489017, -309536), (487774, -302475), (487832, -297520), (489575, -292687), (491516, -288974), (492873, -287246), (496142, -285622), (497858, -283486), (498415, -282305), (499851, -278745), (504392, -273556), (507217, -270498), (512297, -269184), (518739, -270607), (524991, -270175), (529894, -269798), (534574, -269158), (541694, -271796), (546447, -275602), (548662, -276437), (552605, -275790), (557173, -274732), (561964, -275163), (566189, -275600), (568850, -276886), (570471, -278976), (573296, -280908), (575616, -282570), (578813, -283985), (581413, -285282), (583974, -286742), (586296, -289590), (588152, -291023), (590953, -293379), (592603, -297414), (593121, -298857), (593537, -301144), (594863, -305043), (594456, -309012), (594503, -312077), (595338, -316390), (594541, -320951), (594805, -325881), (593657, -328612), (591390, -334430), (589399, -340445), (588393, -343236), (587161, -346473), (583698, -349447), (578582, -353573), (574694, -356026)]
   al_l = [(652315, -370573), (646951, -367133), (642087, -363277), (636937, -360786), (633778, -358758), (630511, -356863), (625542, -354013), (622528, -352388), (618955, -349077), (615585, -345376), (614866, -343376), (614737, -340197), (614752, -337837), (614453, -333831), (611786, -328750), (609291, -326324), (608126, -323187), (606694, -318933), (606599, -313779), (603624, -307920), (599623, -303564), (599038, -300475), (598278, -297225), (599707, -292588), (603168, -288755), (605888, -286322), (609197, -284528), (612558, -283726), (614840, -283326), (618010, -280746), (620882, -278013), (623165, -276876), (626701, -275988), (632042, -276481), (638968, -276153), (643501, -274303), (647758, -273735), (652108, -272858), (655173, -271678), (659292, -272492), (663891, -273838), (667503, -273994), (670427, -273868), (674036, -273107), (680093, -273164), (685413, -274343), (689580, -277015), (695317, -281147), (698586, -283983), (701117, -287085), (703554, -289533), (704471, -293130), (705809, -296881), (706564, -300647), (705410, -306189), (702982, -312178), (703176, -317905), (704923, -320772), (706054, -322449), (706716, -324909), (706534, -327865), (706668, -330333), (707595, -332390), (707600, -335626), (706190, -338461), (701787, -341302), (697217, -344187), (694347, -347163), (691399, -349714), (688504, -352165), (683789, -355085), (679994, -357439), (676219, -360262), (671406, -364153), (668203, -367388), (665836, -369842), (663059, -371506), (659990, -371469), (656807, -371304), (653752, -370866), (649537, -369421), (644490, -364742), (639612, -362154), (634759, -359534), (632770, -358015), (627826, -355472), (623746, -352860), (621169, -351495), (616791, -346562), (615042, -344616), (614837, -341842), (614673, -338757), (614753, -336505), (613561, -330888), (610054, -327276), (608860, -325194), (607325, -320901), (606398, -316740), (606080, -310642), (600912, -305574), (599188, -301871), (598845, -299039), (598258, -295065), (601663, -290312), (604487, -287548), (607435, -285255), (610972, -284048), (613875, -283505), (616027, -282603), (619918, -278851), (621698, -277573), (624945, -276241), (628909, -276081), (635572, -276675), (641767, -275251), (645166, -273676), (650373, -273716), (653522, -271924), (657087, -271930), (661617, -273186), (665919, -274192), (668916, -273725), (672110, -273851), (676574, -272568), (683428, -274041), (687110, -275018), (692442, -279377), (697575, -282593), (699412, -285440), (702799, -288566), (703930, -290787), (705118, -295511), (706354, -298255), (706297, -303482), (704205, -309007), (702414, -315284), (704326, -319812), (705366, -321435), (706624, -323659), (706596, -326283), (706551, -329325), (706984, -331238), (707976, -333837), (706871, -337315), (704761, -339608), (698771, -343006), (696088, -345390), (692587, -348830), (690225, -350572), (686329, -353876), (681479, -356153), (678513, -358843), (673664, -361949), (669550, -366193), (667065, -368388), (664505, -371099), (661540, -371487), (658411, -371418), (655998, -371231)]

   slp_r = [(468929, -243900), (465843, -245383), (463476, -245971), (461489, -246012), (459273, -245413), (457236, -244514), (452761, -243938), (446500, -243330), (441512, -242012), (438308, -241194), (436656, -240370), (434915, -237235), (432866, -231721), (430715, -227851), (427620, -226332), (423904, -224529), (421455, -222505), (420133, -220240), (417772, -216698), (415229, -212864), (413569, -210487), (413666, -207105), (414796, -202649), (416364, -200275), (419433, -197798), (423671, -194347), (427218, -189740), (428379, -186571), (430496, -186062), (433782, -182116), (438411, -176509), (442095, -173841), (443832, -171934), (448287, -170277), (451846, -169479), (455453, -168484), (461976, -165584), (468505, -163782), (474015, -163220), (476570, -162114), (477711, -161974), (480500, -161596), (483092, -160662), (486196, -159863), (489214, -159424), (491931, -158642), (495557, -158698), (498621, -158895), (500656, -158576), (502164, -158705), (505244, -159006), (509066, -159657), (512656, -160573), (516371, -161087), (519183, -161165), (521726, -161689), (523418, -163309), (524401, -165861), (525149, -170538), (522754, -176652), (517487, -180787), (514224, -185592), (514185, -193177), (514679, -197951), (515084, -198980), (516041, -200869), (516903, -203067), (517065, -204873), (517639, -207370), (517179, -209757), (513547, -211682), (508231, -212213), (503238, -211969), (498572, -213788), (495246, -216602), (492296, -220349), (490281, -224415), (488280, -228550), (486271, -231434), (485296, -233240), (484065, -235085), (481740, -236500), (478937, -238796), (476166, -240439), (472436, -241740), (469749, -243206), (467338, -244965), (464528, -245578), (462519, -246227), (460402, -245636), (458189, -245114), (455675, -243995), (449402, -243873), (443917, -242610), (439553, -241539), (437450, -240848), (435839, -239314), (433913, -234561), (431793, -229292), (429400, -226998), (425684, -225595), (422441, -223408), (420751, -221542), (419256, -218618), (416242, -214704), (414436, -211388), (413141, -209335), (414449, -204607), (415253, -201212), (417850, -199313), (421308, -196040), (425862, -192366), (427978, -187473), (429018, -186333), (432265, -184931), (435634, -178886), (440951, -174867), (442752, -173006), (445591, -170925), (450759, -169845), (452946, -169064), (458690, -167428), (465264, -164015), (471490, -163860), (475801, -162445), (476986, -162025), (478848, -161864), (482103, -161189), (484209, -160169), (488162, -159648), (490191, -159115), (493898, -158378), (497075, -159053), (499910, -158608), (501270, -158655), (503451, -158798), (507224, -159302), (510851, -160079), (514492, -160967), (518023, -161099), (520275, -161343), (522964, -162310), (523696, -164541), (525047, -167713), (524465, -173723), (520325, -179087), (515151, -182655), (514104, -189223), (514400, -196428), (514936, -198538), (515370, -199637), (516689, -202179), (516943, -203858), (517291, -206062), (517729, -208652), (515836, -210748), (510837, -212268), (505707, -211964), (500851, -212489), (496628, -215336), (493958, -218102), (490868, -222676), (489698, -226171), (486860, -230616), (485940, -231983), (484588, -234507), (483268, -235555), (480092, -237665), (477790, -239764), (474302, -241029), (471502, -242126)]
   slp_l = [(747782, -262083), (744626, -261724), (740091, -261197), (736374, -259290), (731879, -256657), (728780, -254992), (726600, -252940), (723756, -250552), (721247, -247698), (719931, -245500), (718102, -243017), (714896, -239369), (713102, -235716), (712242, -232115), (710340, -228273), (709004, -225027), (707893, -221850), (706082, -218367), (701983, -214839), (698249, -212595), (696879, -212408), (695363, -211463), (693277, -209817), (691245, -208750), (691150, -207763), (693209, -204521), (694375, -199636), (693492, -194756), (693270, -190820), (692994, -187793), (692169, -185650), (690437, -183352), (688060, -180117), (686230, -177983), (683580, -176682), (681469, -173116), (681237, -169084), (681573, -166961), (682269, -165738), (684891, -165133), (687927, -164181), (692227, -163643), (699063, -163006), (704803, -163029), (708255, -163607), (710790, -162776), (714370, -163451), (718080, -164625), (721426, -164528), (726282, -165520), (730987, -167166), (734606, -168673), (738963, -170261), (744124, -172853), (747711, -175974), (751284, -178041), (754357, -178770), (755489, -179877), (758384, -182460), (763444, -185085), (766359, -186801), (767691, -190282), (771791, -195363), (775866, -197339), (777335, -197665), (778852, -199995), (782412, -203669), (786024, -207851), (787722, -211986), (787877, -215122), (788126, -219845), (787348, -224574), (785731, -228049), (784247, -231509), (782304, -234010), (780834, -237997), (778790, -242274), (773931, -244743), (769928, -247432), (768774, -251668), (768141, -255835), (767565, -258246), (766403, -259543), (764441, -260466), (761745, -261993), (758062, -262780), (751874, -262241), (747845, -262063), (746930, -262013), (741977, -261393), (738409, -260656), (734144, -257742), (729963, -255813), (727826, -254074), (725208, -251723), (722388, -249265), (720404, -246295), (719329, -244633), (716531, -241109), (713614, -237627), (712823, -233818), (711400, -230353), (709422, -226343), (708643, -223728), (706969, -219895), (704623, -216828), (699434, -213171), (697654, -212533), (696068, -212094), (694516, -210657), (692051, -209122), (690922, -208399), (691916, -206564), (694279, -202068), (693960, -197206), (693190, -192542), (693336, -189325), (692515, -186482), (691596, -184779), (689116, -181691), (687141, -178818), (685114, -177356), (682180, -175441), (681228, -170674), (681388, -167972), (681848, -166175), (683172, -165455), (686714, -164724), (689456, -163741), (695632, -163520), (702220, -162658), (706814, -163539), (709467, -163322), (712375, -162606), (716398, -164420), (719671, -164511), (723559, -164817), (728967, -166386), (732735, -167912), (736661, -169455), (741466, -171319), (746387, -174520), (749030, -177164), (753413, -178583), (754816, -179052), (756602, -181071), (760708, -183860), (765644, -186084), (766678, -187960), (769397, -193005), (774179, -196946), (776902, -197320), (777781, -198512), (780434, -201815), (784403, -205650), (787166, -210040), (787892, -213681), (787885, -216959), (788110, -222732), (786376, -226102), (785119, -229992), (783261, -232786), (781466, -235606), (780058, -240460), (776818, -243636), (771259, -245905), (769310, -249346), (768369, -253973), (767928, -257258), (767056, -258956), (765549, -260037), (763150, -261046), (760093, -262754), (755404, -262474), (749891, -262142)]

   sip_r = [(519773, -247951), (515735, -246675), (510289, -245145), (507295, -244328), (505320, -243324), (502059, -242823), (499222, -242975), (495603, -244621), (489874, -247705), (485274, -249629), (482202, -249573), (478868, -249750), (475793, -249320), (474440, -248287), (472853, -246605), (470132, -244012), (469180, -242405), (471668, -240116), (477067, -236862), (482046, -231374), (482364, -225144), (480574, -222444), (479324, -220914), (478316, -216727), (477503, -211122), (476678, -206412), (476016, -203394), (477482, -198993), (480991, -193171), (483008, -187954), (484643, -181380), (486627, -174505), (487497, -169921), (488238, -167412), (490916, -165588), (495527, -163586), (500497, -161342), (504022, -160609), (508335, -160586), (513050, -160790), (515895, -161065), (517795, -161049), (520813, -161596), (524340, -162188), (526207, -162747), (527940, -163670), (531272, -164203), (534544, -164117), (535091, -166440), (534714, -170364), (532278, -173889), (529847, -176463), (528275, -180619), (528526, -187384), (531013, -193082), (532785, -198273), (534778, -203200), (536051, -206743), (536973, -211026), (538978, -215812), (540915, -217964), (541267, -219597), (540988, -222767), (541311, -226160), (540195, -228727), (538304, -230767), (537690, -232134), (536976, -234383), (532221, -238541), (527564, -242356), (523828, -245810), (520141, -247905), (518395, -247679), (512722, -245607), (508469, -244860), (506376, -243749), (503942, -243025), (500281, -242784), (497968, -243540), (492711, -246062), (487319, -249058), (483611, -249705), (480728, -249500), (477072, -249848), (474943, -248641), (473877, -247771), (471545, -245211), (469160, -243060), (470059, -241579), (474004, -238411), (480025, -234754), (482902, -227809), (481299, -223362), (479984, -221819), (478725, -219345), (477956, -213755), (477047, -208713), (476350, -204535), (476213, -201908), (479261, -195723), (482348, -190770), (483572, -184798), (485801, -177887), (487175, -171696), (487788, -168664), (489172, -166331), (493143, -164800), (498001, -162311), (502632, -160750), (505609, -160645), (511161, -160583), (514472, -161016), (517082, -161042), (518787, -161197), (522966, -162006), (525299, -162362), (527081, -163223), (529198, -164019), (533331, -164231), (535075, -164605), (534876, -168675), (534038, -171952), (530519, -175588), (529389, -177735), (527616, -184156), (529994, -190346), (531853, -195692), (533773, -200788), (535603, -205265), (536411, -208406), (537806, -213771), (540133, -217195), (541300, -218604), (541075, -220975), (541051, -224615), (541212, -227498), (538984, -229824), (537944, -231542), (537411, -232947), (535531, -236296), (528936, -240700), (526422, -243922), (522169, -246834)]
   sip_l = [(689865, -250347), (683815, -249235), (678732, -246585), (674558, -242637), (670978, -240243), (668814, -240117), (666923, -239689), (663781, -237240), (660354, -234372), (660170, -231198), (662966, -227429), (665024, -223813), (666761, -220398), (668847, -217575), (670190, -215408), (670886, -214338), (671846, -213021), (672610, -209427), (673599, -204969), (677392, -200055), (679781, -194462), (677845, -189261), (674477, -184729), (670344, -180322), (667226, -174411), (667142, -169862), (668799, -167812), (671033, -167257), (674677, -167471), (678772, -167908), (682360, -167705), (686923, -167583), (691586, -168776), (696096, -169753), (701745, -170746), (706111, -172522), (707771, -174740), (708954, -177279), (710847, -179598), (712601, -182299), (713126, -186276), (713190, -189526), (713447, -191407), (713327, -193765), (714663, -198191), (715611, -202336), (715671, -205871), (716264, -209193), (717461, -213092), (719993, -217154), (721585, -219575), (719935, -224733), (717785, -231778), (717302, -237770), (720016, -242968), (723748, -246826), (726804, -250255), (729259, -253948), (729256, -257415), (727546, -259979), (723854, -261597), (720216, -261719), (717356, -259889), (713966, -256366), (710505, -253412), (706363, -251538), (701843, -249971), (696417, -250072), (691425, -250464), (686793, -249951), (681079, -248135), (676613, -244712), (672652, -240951), (669658, -240101), (668038, -240057), (665494, -238817), (661996, -235559), (659523, -233108), (661563, -229139), (664185, -225757), (665783, -221919), (667826, -219024), (669683, -216290), (670536, -214801), (671302, -213813), (672340, -211659), (672936, -206978), (674963, -202845), (679470, -197095), (679011, -191927), (676321, -186762), (672442, -182727), (668499, -177542), (666711, -171622), (668008, -168728), (669734, -167270), (672684, -167437), (676783, -167561), (680634, -168095), (684330, -167335), (689541, -168159), (693592, -169339), (698884, -170172), (704285, -171516), (707259, -173639), (708162, -175922), (709923, -178581), (711737, -180711), (713159, -184206), (712979, -188165), (713450, -190545), (713350, -192389), (713668, -195659), (715561, -200653), (715438, -203866), (716036, -207822), (716642, -210709), (718614, -215516), (721138, -218381), (721221, -221452), (718523, -228485), (717463, -234808), (717941, -240534), (722346, -245067), (724981, -248477), (728477, -252098), (729427, -255742), (728658, -258863), (725939, -260859), (721782, -261962), (718844, -260989), (715736, -258366), (712178, -254508), (708662, -252587), (703970, -250566), (699490, -249793), (694701, -250327)]

   cre_r = [(558997, -283589), (554341, -283398), (548165, -283924), (540930, -285305), (534608, -286182), (528043, -286263), (520823, -285398), (515759, -281077), (512380, -275247), (509820, -272348), (509193, -270168), (507484, -266435), (503772, -259835), (500777, -255260), (498600, -254098), (497171, -251500), (496627, -248832), (496028, -246159), (495826, -243299), (496217, -239853), (497115, -237139), (498400, -235985), (500947, -234495), (503289, -236081), (503465, -240508), (503700, -247028), (504093, -252167), (505831, -258144), (509679, -262670), (513299, -259975), (517961, -256286), (520891, -251777), (520544, -247662), (520904, -244488), (521539, -241321), (521499, -238485), (520013, -234937), (517571, -228398), (517222, -221791), (518927, -218874), (520458, -217366), (521238, -215068), (522475, -211330), (524039, -206777), (525695, -202243), (526866, -199967), (528045, -198715), (529560, -197643), (531725, -198952), (536505, -200923), (540956, -201736), (544764, -203979), (550273, -206802), (555476, -208224), (558102, -209040), (559313, -209838), (561554, -210767), (565390, -213045), (568917, -215270), (572712, -216933), (576834, -218597), (580956, -219190), (585484, -220692), (587689, -222597), (586331, -225068), (584353, -227577), (582113, -229367), (578867, -230943), (575251, -234757), (573878, -240168), (575743, -242954), (578483, -244278), (581787, -248105), (583599, -253610), (584437, -257311), (584207, -259765), (583619, -263615), (584341, -267375), (585265, -269867), (585129, -273549), (582008, -276756), (574812, -278494), (568248, -280009), (563830, -282095), (560227, -283493), (556603, -283638), (551700, -283337), (544366, -284724), (537722, -285760), (531434, -286405), (524489, -285885), (517696, -284047), (514242, -277729), (510723, -273497), (509401, -271378), (508716, -268569), (505752, -263584), (501971, -256592), (499787, -254781), (497599, -253056), (496964, -249927), (496276, -247736), (495879, -244535), (495921, -241916), (496640, -237972), (497687, -236696), (499428, -235190), (502415, -234569), (503622, -238303), (503322, -243236), (504118, -250475), (504405, -254069), (507785, -261856), (511515, -261678), (515344, -258023), (520146, -254344), (520817, -249308), (520448, -246251), (521428, -242727), (521481, -239997), (521155, -236794), (518631, -232332), (517033, -224447), (517923, -220058), (519887, -218042), (520841, -216492), (521749, -213284), (523283, -209172), (524818, -204386), (526451, -200664), (527284, -199526), (528891, -197949), (530391, -197932), (533713, -200138), (539215, -201419), (542537, -202411), (547417, -205692), (553053, -207562), (557255, -208734), (558596, -209342), (560287, -210368), (563220, -211504), (567483, -214573), (570418, -215827), (575088, -218038), (578580, -218888), (583433, -219719), (586954, -221766), (587533, -223569), (584973, -226576), (583667, -228398), (580308, -230283), (577334, -232162), (573728, -237751), (574838, -241929), (576867, -243613), (580241, -245569), (582960, -251061), (583995, -255708), (584613, -258603), (583712, -261277), (583853, -265930), (584880, -268502), (585386, -271529), (584126, -275450), (578871, -277694), (570911, -279238), (566121, -280922), (562644, -282746)]
   cre_l = [(675014, -280093), (669755, -278568), (664449, -276974), (658160, -277137), (653002, -279066), (649915, -279958), (645337, -280714), (637818, -281710), (633026, -282120), (629181, -282275), (623647, -281767), (618803, -280285), (615527, -276784), (613915, -272977), (612654, -269393), (610383, -265692), (606299, -262388), (602047, -258996), (599388, -256382), (598046, -252863), (595528, -248227), (592953, -244033), (593573, -240457), (595639, -237453), (597690, -234111), (599174, -228952), (598869, -224351), (599310, -221466), (601239, -218466), (603311, -216980), (605698, -217470), (608917, -218588), (614939, -218965), (620058, -217567), (623846, -216321), (629550, -216003), (635220, -215178), (639003, -213345), (643272, -210707), (649135, -209452), (654991, -208945), (659573, -208386), (662670, -208298), (666208, -209932), (670338, -212105), (673600, -213152), (677475, -216419), (681241, -219727), (682775, -221680), (683763, -226406), (683977, -233845), (684092, -240171), (683729, -245595), (682970, -248997), (683044, -250858), (681942, -253587), (681776, -258502), (683833, -263106), (686346, -265429), (688891, -268342), (690117, -272646), (689739, -277674), (685825, -280080), (680352, -280552), (676691, -280462), (672023, -279342), (667476, -277777), (661176, -276611), (655427, -278104), (651096, -279769), (648361, -280113), (641578, -281375), (634740, -281898), (631548, -282278), (626392, -282107), (621074, -281184), (616923, -278881), (614547, -274611), (613370, -271399), (611685, -267357), (608628, -264126), (603929, -260628), (600564, -257559), (598542, -254979), (597256, -250468), (593786, -246096), (592919, -242124), (594589, -238933), (596686, -235890), (598552, -231879), (599348, -226166), (598576, -222966), (600417, -219938), (602097, -217372), (604604, -217082), (607000, -218015), (611535, -218976), (618117, -218511), (621666, -216662), (626505, -216212), (632587, -215668), (637381, -214436), (640747, -212053), (646196, -209707), (652072, -209384), (657591, -208493), (661184, -208396), (664267, -208630), (668297, -211369), (672162, -212560), (675192, -214300), (679731, -218548), (682194, -220567), (683220, -223487), (684112, -230004), (683817, -237408), (684248, -242709), (683111, -247976), (683038, -249634), (682756, -252300), (681362, -255421), (682745, -261505), (685034, -264137), (687666, -266869), (689786, -270163), (690046, -275310), (688548, -279382), (682712, -280294), (679360, -280692)]

   remote_instance = kwargs.get('remote_instance', [])
   skdata = kwargs.get('skdata', [])
   skids = kwargs.get('skids', [])
   connectors = kwargs.get('connectors', True )
   connectors_only = kwargs.get('connectors_only', False )
   project_id = kwargs.get('project_id', [])
   zoom = kwargs.get('zoom', False )
   limits = kwargs.get('limits', None )
   auto_limits = kwargs.get('auto_limits', False )


   if not skdata and remote_instance and skids:
      skdata = get_3D_skeleton ( skids, remote_instance, connector_flag = 1, tag_flag = 0 , get_history = False, time_out = None, get_abutting = True, project_id = project_id)
   else:
      module_logger.error('You need to provide either a list of skeleton IDs and a CATMAID remote_instance OR skeleton data. See help(plot.plot2d).')
      return

   fig, ax = plt.subplots(figsize = (8,8))
   ax.set_aspect('equal')

   args = [a.lower() for a in args]
   kwargs = {k.lower(): kwargs[k] for k in kwargs}

   if 'brain' in args or 'brain' in kwargs:
      c = kwargs.get('brain', (0.9,0.9,0.9) )

      brain_p = Polygon(brain, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )
      hole_p = Polygon(hole, closed = True, lw = 0, fill =True, fc = 'white', alpha = 1 )

      ax.add_patch( brain_p )
      ax.add_patch( hole_p )
   if 'cre' in args or 'cre' in kwargs:
      c = kwargs.get('cre', (0.8,0.8,0.8) )

      cre_r_p = Polygon(cre_r, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )
      cre_l_p = Polygon(cre_l, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )

      ax.add_patch( cre_r_p )
      ax.add_patch( cre_l_p )
   if 'sip' in args or 'sip' in kwargs:
      c = kwargs.get('sip', (0.8,0.8,0.8) )

      sip_r_p = Polygon(sip_r, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )
      sip_l_p = Polygon(sip_l, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )

      ax.add_patch( sip_r_p )
      ax.add_patch( sip_l_p )
   if 'slp' in args or 'slp' in kwargs:
      c = kwargs.get('slp', (0.8,0.8,0.8) )

      slp_r_p = Polygon(slp_r, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )
      slp_l_p = Polygon(slp_l, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )

      ax.add_patch( slp_r_p )
      ax.add_patch( slp_l_p )
   if 'mb' in args or 'mb' in kwargs:
      c = kwargs.get('mb', (0.8,0.8,0.8) )

      mb_r_p = Polygon(mb_r, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )
      mb_l_p = Polygon(mb_l, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )

      ax.add_patch( mb_r_p )
      ax.add_patch( mb_l_p )
   if 'lh' in args or 'lh' in kwargs:
      c = kwargs.get('lh', (0.8,0.8,0.8) )

      lh_r_p = Polygon(lh_r, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )
      lh_l_p = Polygon(lh_l, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )

      ax.add_patch( lh_r_p )
      ax.add_patch( lh_l_p )

   if 'al' in args or 'al' in kwargs:
      c = kwargs.get('al', (0.8,0.8,0.8) )

      al_r_p = Polygon(al_r, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )
      al_l_p = Polygon(al_l, closed = True, lw = 0, fill =True, fc = c, alpha = 1 )

      ax.add_patch( al_r_p )
      ax.add_patch( al_l_p )

   if limits:
      catmaid_limits = limits
   elif auto_limits:
      min_x = min ( [ n.nodes.x.min() for n in skdata.itertuples() ] + [ n.connectors.x.min() for n in skdata.itertuples() ] )
      max_x = max ( [ n.nodes.x.max() for n in skdata.itertuples() ] + [ n.connectors.x.max() for n in skdata.itertuples() ] )

      min_y = min ( [ n.nodes.y.min() for n in skdata.itertuples() ] + [ n.connectors.y.min() for n in skdata.itertuples() ] )
      max_y = max ( [ n.nodes.y.max() for n in skdata.itertuples() ] + [ n.connectors.y.max() for n in skdata.itertuples() ] )

      min_z = min ( [ n.nodes.z.min() for n in skdata.itertuples() ] + [ n.connectors.z.min() for n in skdata.itertuples() ] )
      max_z = max ( [ n.nodes.z.max() for n in skdata.itertuples() ] + [ n.connectors.z.max() for n in skdata.itertuples() ] )

      max_dim = max( [ max_x - min_x, max_y - min_y, max_z - min_z  ] ) * 1.1

      #Also make sure that dimensions along all axes are the same - otherwise plot will be skewed
      catmaid_limits = {   #These limits refer to x/y/z in CATMAID -> will later on be inverted to make 2d plot
                  'x': [ int( (min_x + (max_x - min_x)/2 ) - max_dim/2 ), int( (min_x + (max_x - min_x)/2 ) + max_dim/2 )] ,
                  'z': [ int( (min_z + (max_z - min_z)/2 ) - max_dim/2 ), int( (min_z + (max_z - min_z)/2 ) + max_dim/2 )] ,
                  'y': [ int( (min_y + (max_y - min_y)/2 ) + max_dim/2 ), int( (min_y + (max_y - min_y)/2 ) - max_dim/2 )] #This needs to be inverted
               }  #z and y need to be inverted here!
   elif zoom:
      catmaid_limits = {   #These limits refer to x/y in CATMAID -> need to invert y (CATMAID coordindates start in upper left, matplotlib bottom left)
                  'x': [380000, 820000],
                  'y': [355333, 150000]
               }
   else:
      catmaid_limits = {   #These limits refer to x/y in CATMAID -> need to invert y (CATMAID coordindates start in upper left, matplotlib bottom left)
                  #'x': [200000, 1000000],
                  #'y': [510000, 150000]
                  'x': [200000, 1000000],
                  'y': [ 730000, -70000]
               }

   ax.set_ylim( ( -catmaid_limits['y'][0], -catmaid_limits['y'][1] ) )
   ax.set_xlim( ( catmaid_limits['x'][0], catmaid_limits['x'][1] ) )

   plt.axis('off')

   module_logger.debug('Plot limits set to: x= %i -> %i; y = %i -> %i' % ( catmaid_limits['x'][0], catmaid_limits['x'][1], -catmaid_limits['y'][0], -catmaid_limits['y'][1] ) )

   if skdata.shape[0] > 1:
      colormap = random_colors ( len(skdata) , color_space='RGB')
   else:
      colormap = [ (float(0),float(0),float(0)) ]

   #Create slabs (lines)
   for i, neuron in enumerate( skdata.itertuples() ):
      module_logger.debug('Working on neuron %s...' % neuron.neuron_name )
      lines = []

      if 'type' not in neuron.nodes:
         neuron = morpho.classify_nodes( neuron )

      b_points = neuron.nodes[ neuron.nodes.type == 'branch' ].treenode_id.tolist()
      end_points = neuron.nodes[ neuron.nodes.type == 'end' ].treenode_id.tolist()
      soma = neuron.nodes[ neuron.nodes.radius > 1000 ]

      if neuron.nodes.index.name != 'treenode_id':
         neuron.nodes.set_index('treenode_id', inplace = True )

      if not connectors_only:
         module_logger.debug('Finding slabs... (%i branch points)' % len(b_points) )
         for k, node in enumerate(b_points + end_points):
            if neuron.nodes.ix[node].parent_id == None:
               continue

            this_line = [ node ]
            while True: #neuron.nodes.ix[ this_line[-1] ].parent_id not in b_points
               this_line.append( neuron.nodes.ix[ this_line[-1] ].parent_id )

               if neuron.nodes.ix[ this_line[-1] ].parent_id is None:
                  module_logger.debug('Ended slab %i at root after %i nodes' % ( k , len(this_line) ) )
                  break

               if neuron.nodes.ix[ this_line[-1] ].parent_id in b_points:
                  module_logger.debug('Ended slab %i at branch point after %i nodes' % ( k , len(this_line) ) )
                  this_line.append( neuron.nodes.ix[ this_line[-1] ].parent_id )
                  break

            lines.append( neuron.nodes.ix[ this_line ][ ['x','y','z'] ].as_matrix().tolist() )

         module_logger.debug('Creating %i lines' % len(lines) )
         module_logger.debug( [ len(l) for l in lines ]  )
         for k,l in enumerate( lines ):
            #User first line to assign a legend
            if k == 0:
               this_line = mlines.Line2D( [ int(x[0]) for x in l ],[ - int(y[1]) for y in l ], lw = 1 , alpha = .9 , color = colormap[i], label = '%s - #%s' % ( neuron.neuron_name , neuron.skeleton_id ) )
            else:
               this_line = mlines.Line2D( [ int(x[0]) for x in l ],[ - int(y[1]) for y in l ], lw = 1 , alpha = .9 , color = colormap[i])
            ax.add_line(this_line)

         for n in soma.itertuples():
            s = Circle( ( int( n.x ), int( -n.y ) ), radius = n.radius , alpha = .9, fill = True, color = colormap[i], zorder=4, edgecolor='none' )
            ax.add_patch(s)

      if connectors or connectors_only:
         module_logger.debug('Plotting %i pre- and %i postsynapses' % ( neuron.connectors[ neuron.connectors.relation == 0 ].shape[0], neuron.connectors[ neuron.connectors.relation == 1 ].shape[0] ) )
         #postsynapses
         ax.scatter( neuron.connectors[ neuron.connectors.relation == 1 ].x.tolist() , (-neuron.connectors[ neuron.connectors.relation == 1 ].y).tolist(), c='blue', alpha = 1, zorder=4, edgecolor='none', s = 2 )
         #presynapses
         ax.scatter( neuron.connectors[ neuron.connectors.relation == 0 ].x.tolist() , (-neuron.connectors[ neuron.connectors.relation == 0 ].y).tolist(), c='red', alpha = 1, zorder=4, edgecolor='none', s = 2 )
         #gap junctions
         ax.scatter( neuron.connectors[ neuron.connectors.relation == 2 ].x.tolist() , (-neuron.connectors[ neuron.connectors.relation == 2 ].y).tolist(), c='green', alpha = 1, zorder=4, edgecolor='none', s = 2 )
         #abutting
         ax.scatter( neuron.connectors[ neuron.connectors.relation == 3 ].x.tolist() , (-neuron.connectors[ neuron.connectors.relation == 3 ].y).tolist(), c='magenta', alpha = 1, zorder=4, edgecolor='none', s = 1 )

   module_logger.info('Done. Use matplotlib.pyplot.show() to show plot.')

   return fig, ax

def random_colors (color_count, color_space='RGB', color_range = 1):
   """ Divides colorspace into N evenly distributed colors
   Returns
   -------
   colormap :  list
            [ (r,g,b),(r,g,b),... ]

   """
   ### Make count_color an even number
   if color_count % 2 != 0:
      color_count += 1

   colormap = []
   interval = 2/color_count
   runs = int(color_count/2)

   ### Create first half with low brightness; second half with high brightness and slightly shifted hue
   if color_space == 'RGB':
      for i in range(runs):
         ### High brightness
         h = interval * i
         s = 1
         v =  1
         hsv = colorsys.hsv_to_rgb(h,s,v)
         colormap.append( tuple( v * color_range for v in hsv ) )

         ### Lower brightness, but shift hue by half an interval
         h = interval * (i+0.5)
         s = 1
         v =  0.5
         hsv = colorsys.hsv_to_rgb(h,s,v)
         colormap.append( tuple( v * color_range for v in hsv ) )
   elif color_space == 'Grayscale':
      h = 0
      s = 0
      for i in range(color_count):
         v = 1/color_count * i
         hsv = colorsys.hsv_to_rgb(h,s,v)
         colormap.append( tuple( v * color_range for v in hsv ) )

   module_logger.debug('%i random colors created: %s' % (color_count, str(colormap ) ) )

   return(colormap)

def fibonacci_sphere(samples=1,randomize=True):
   """ Calculates points on a sphere
   """
   rnd = 1.
   if randomize:
     rnd = random.random() * samples

   points = []
   offset = 2./samples
   increment = math.pi * (3. - math.sqrt(5.));

   for i in range(samples):
     y = ((i * offset) - 1) + (offset / 2);
     r = math.sqrt(1 - pow(y,2))

     phi = ((i + rnd) % samples) * increment

     x = math.cos(phi) * r
     z = math.sin(phi) * r

     points.append([x,y,z])

   return points

def plot3d( *args, **kwargs ):
   """
   Retrieves 3D skeletons and generates 3D plot using plotly (http://plot.ly)

   Parameters:
   ----------
   USE EITHER <skids> or <skdata> to specify which neurons you want to plot

   skids :           list
                     list of CATMAID skeleton ids
   skdata :          skeleton data as retrieved by pymaid.get_3D_skeleton()
   remote_instance : CATMAID remote instance
                     need to pass this too if you are providing only skids
                     also necessary if you want to include volumes!

   Other (optional arguments):
   connectors :      plot synapses and gap junctions (default = False)
   by_strahler :     will render the neuron by strahler index (default = False)
   cn_mesh_colors :  plot connectors using mesh colors (default = False)
   limits :          manually override plot limits
                     {'x' : [min,max], 'y': [min,max], 'z':[min,max]}
   auto_limits :     autoscales plot to fit the neurons (default = False)
   downsampling :    set downsampling of neurons before plotting (default = 8)
   volumes :         list or dict of volumes names
                     if list: [ name, name, ... }
                     if dict: { name:(r,g,b), ... }
   colormap :        { skid : (r,g,b), ... } (default = random colors)
                     color must be 0-255
   title :           plot title (default = 'Neuron plot')
   fig_width and :   use to define figure size (default = 1440/960)
   fig_height
   fig_autosize :    autoscale figure size (default = False)
                     Attention: autoscale overrides fig_width and fig_height
   project_id :      default is 1

   Returns:
   --------
   fig:           dictionary to generate plotly 3d figure
                  use for example:
                  plotly.offline.plot(fig, filename='3d_plot.html')
                  to generate html file and open it webbrowser
   """

   skids = kwargs.get('skids', [] )
   remote_instance = kwargs.get('remote_instance', [] )
   pl_title = kwargs.get('title', 'Neuron Plot' )
   skdata = kwargs.get('skdata', pd.DataFrame() )
   names = kwargs.get('names', [] )
   downsampling = kwargs.get('downsampling', 8)
   volumes = kwargs.get('volumes', [] )
   connectors = kwargs.get('connectors', False )
   by_strahler = kwargs.get('by_strahler', False )
   cn_mesh_colors = kwargs.get('cn_mesh_colors', False )
   limits = kwargs.get('limits', [] )
   auto_limits = kwargs.get('auto_limits', False )
   auto_limits = kwargs.get('autolimits', auto_limits )
   syn_lay = kwargs.get('synapse_layout', {} )

   fig_width = kwargs.get('fig_width', 1440)
   fig_height = kwargs.get('fig_height', 960)
   fig_autosize = kwargs.get('fig_autosize', False)
   project_id = kwargs.get('project_id', [])


   if (skdata.empty and not skids) or (skids and not remote_instance):
      module_logger.error('You need to provide either a list of skeleton IDs and a CATMAID remote_instance OR skeleton data. See help(plot.plot2d).')
      return
   elif skdata.empty and skids and remote_instance:
      skdata = get_3D_skeleton ( skids, remote_instance,
                                                   connector_flag = 1,
                                                   tag_flag = 0 ,
                                                   get_history = False,
                                                   time_out = None,
                                                   get_abutting = True,
                                                   project_id = project_id )
   elif 'nodes' in skdata.index.tolist():
      #If skdata is just a single neuron, bring it into a proper list format
      skdata = pd.DataFrame( [ skdata ] )

   colormap = kwargs.get('colormap', {})

   if not colormap:
      if skdata.shape[0] > 1:
         colormap = { str(n) : random_colors ( len( skdata ) , color_space='RGB', color_range = 255)[i] for i,n in enumerate( skdata.skeleton_id.tolist() ) }
      else:
         colormap = { str( skdata.ix[0].skeleton_id ) : (0,0,0)  }

   if limits:
      catmaid_limits = limits
   elif auto_limits:
      min_x = min ( [ n.nodes.x.min() for n in skdata.itertuples() ] + [ n.connectors.x.min() for n in skdata.itertuples() ] )
      max_x = max ( [ n.nodes.x.max() for n in skdata.itertuples() ] + [ n.connectors.x.max() for n in skdata.itertuples() ] )

      min_y = min ( [ n.nodes.y.min() for n in skdata.itertuples() ] + [ n.connectors.y.min() for n in skdata.itertuples() ] )
      max_y = max ( [ n.nodes.y.max() for n in skdata.itertuples() ] + [ n.connectors.y.max() for n in skdata.itertuples() ] )

      min_z = min ( [ n.nodes.z.min() for n in skdata.itertuples() ] + [ n.connectors.z.min() for n in skdata.itertuples() ] )
      max_z = max ( [ n.nodes.z.max() for n in skdata.itertuples() ] + [ n.connectors.z.max() for n in skdata.itertuples() ] )

      max_dim = max( [ max_x - min_x, max_y - min_y, max_z - min_z  ] ) * 1.1

      #Also make sure that dimensions along all axes are the same - otherwise plot will be skewed
      catmaid_limits = {   #These limits refer to x/y/z in CATMAID -> will later on be inverted and switched to make 3d plot
                  'x': [ int( (min_x + (max_x - min_x)/2 ) - max_dim/2 ), int( (min_x + (max_x - min_x)/2 ) + max_dim/2 )] ,
                  'y': [ int( (min_z + (max_z - min_z)/2 ) - max_dim/2 ), int( (min_z + (max_z - min_z)/2 ) + max_dim/2 )] ,
                  'z': [ int( (min_y + (max_y - min_y)/2 ) - max_dim/2 ), int( (min_y + (max_y - min_y)/2 ) + max_dim/2 )]
               }  #z and y need to be inverted here!
   else:
      catmaid_limits = {   #These limits refer to x/y/z in CATMAID -> will later on be inverted and switched to make 3d plot
                  'x': [200000, 1000000], #Make sure [0] < [1]!
                  'z': [-70000, 730000], #Also make sure that dimensions along all axes are the same - otherwise plot will be skewed
                  'y': [-150000, 650000]
               }

   #Use catmaid project's limits to scale axis -> we basically have to invert
   #everything to give the plot the right orientation
   ax_limits= {
               'x': [-catmaid_limits['x'][1],-catmaid_limits['x'][0]],
               'z': [-catmaid_limits['z'][1], -catmaid_limits['z'][0]],
               'y': [-catmaid_limits['y'][1], -catmaid_limits['y'][0]]
            }

   module_logger.info('Preparing neurons for plotting')

   #First downsample neurons
   if downsampling > 1:
      skdata = pd.DataFrame( [ morpho.downsample_neuron ( skdata.ix[i], downsampling ) for i in range( skdata.shape[0] ) ] )

   trace_data = []
   for i, neuron in enumerate( skdata.itertuples() ):
      module_logger.debug('Working on neuron %s' % str( neuron.skeleton_id ) )

      neuron_name = neuron.neuron_name
      skid = neuron.skeleton_id

      if by_strahler:
         s_index = morpho.calc_strahler_index( skdata.ix[i] )

      #First, we have to generate slabs from the neurons
      if 'type' not in neuron.nodes:
         neuron = morpho.classify_nodes( neuron )

      b_points = neuron.nodes[ neuron.nodes.type == 'branch' ].treenode_id.tolist()
      end_points = neuron.nodes[ neuron.nodes.type == 'end' ].treenode_id.tolist()
      root = neuron.nodes[ neuron.nodes.type == 'root' ].treenode_id.tolist()
      soma = neuron.nodes[ neuron.nodes.radius > 1000 ]

      #Set dataframe indices to treenode IDs - will facilitate distributing nodes
      if neuron.nodes.index.name != 'treenode_id':
         neuron.nodes.set_index('treenode_id', inplace = True)

      module_logger.debug('Generating slabs for %i branch/end nodes' % len( b_points + end_points ) )

      slabs = []
      #Now walk from each branch and leaf node to the next
      for n in b_points + end_points:
         this_slab = [ n, neuron.nodes.ix[ n ].parent_id ]
         while this_slab[-1] not in b_points+end_points+root:
            try:
               this_slab += [ neuron.nodes.ix[ this_slab[-1] ].parent_id ]
            except:
               break #will fail if root node (cause no parent)

         try:
            this_slab.remove(None)
         except:
            pass

         slabs.append( this_slab )

      module_logger.debug('Generating traces')

      #Now add traces
      for k,s in enumerate(slabs):
         if by_strahler:
            c = 'rgba(%i,%i,%i,%f)' % (   colormap[str( skid )][0],
                                          colormap[str( skid )][1],
                                          colormap[str( skid )][2],
                                          s_index[ s[0] ] / max( s_index.values()
                                       ) )
         else:
            c = 'rgb%s' % str( colormap[ str( skid ) ] )

         trace_data.append( go.Scatter3d(    x = (-neuron.nodes.ix[ s ].x).tolist(),
                                             y = (-neuron.nodes.ix[ s ].z).tolist(), #y and z are switched
                                             z = (-neuron.nodes.ix[ s ].y).tolist(),

                                             mode = 'lines',
                                             line=dict(
                                             color=c,
                                             width=5
                                     ),
                                     name = neuron_name,
                                     legendgroup = neuron_name,
                                     showlegend = k == 0,
                                     hoverinfo='none'

                           ) )
      #Add soma(s):
      fib_points = fibonacci_sphere( samples = 30 )
      for n in soma.itertuples():
         trace_data.append(  go.Mesh3d(
                                   x = [ (v[0] * n.radius/2) - n.x for v in fib_points ],
                                   y = [ (v[1] * n.radius/2) - n.z for v in fib_points ], #y and z are switched
                                   z = [ (v[2] * n.radius/2) - n.y for v in fib_points ],

                                   alphahull = .5,

                                   color = 'rgb(%s)' % str(colormap[ str( skid ) ]),
                                   name = neuron_name,
                                   legendgroup = neuron_name,
                                   showlegend = False,
                                   hoverinfo='name'
                           )
                        )

      if connectors:
         #Prepare dict with properties for different types of connectors
         if not syn_lay:
            syn_lay = {
                     0: {
                        'name' : 'Presynapses',
                        'color': 'ff0000'
                        },
                     1: {
                        'name' : 'Postsynapses',
                        'color': '0000ff'
                        },
                     2: {
                        'name' : 'Gap junctions',
                        'color': '00ff00'
                        },
                     'display' : 'circles'
                     }

         for j in [ 0,1,2 ]:
            if cn_mesh_colors:
               color = 'rgb%s' % str(colormap[ str( skid ) ])
            else:
               color = syn_lay[ j ]['color']

            for k,s in enumerate( neuron.connectors[ neuron.connectors.relation == j ].itertuples() ):
               if k == 0:
                  show_legend = True
                  name = syn_lay[ j ]['name'] + ' of ' + neuron_name
               else:
                  show_legend = False
                  name = 'Connector ' + str( s.connector_id )

               if syn_lay['display'] == 'circles':
                  trace_data.append( go.Scatter3d(
                                          x = [ (-s.x) ],
                                          y = [ (-s.z) ], #y and z are switched
                                          z = [ (-s.y) ],
                                          mode = 'markers',
                                           marker=dict(
                                               color= color,
                                               size = 2
                                           ),
                                           name = name,
                                           legendgroup = syn_lay[ j ]['name'] + ' of ' + neuron_name,
                                           showlegend = show_legend,
                                           hoverinfo='none'
                                 ) )
               elif syn_lay['display'] == 'lines':
                  #Find associated treenode
                  tn = neuron.nodex.ix[ s.treenode_id ]
                  trace_data.append( go.Scatter3d(
                                          x = [ -tn[3], -s.x ],
                                          y = [ -tn[5], -s.z ], #y and z are switched
                                          z = [ -tn[4], -s.y ],
                                          mode = 'lines',
                                           line=dict(
                                               color= color,
                                               width = 5
                                           ),
                                           name = name,
                                           legendgroup = syn_lay[ j ]['name'] + ' of ' + neuron_name,
                                           showlegend = show_legend,
                                           hoverinfo='none'
                                 ) )

      neuron.nodes.reset_index( inplace = True )

   #Now add neuropils:
   for v in volumes:
      if not remote_instance:
         module_logger.error('Unable to add volumes - please also pass a Catmaid Instance using <remote_instance = ...>')
         break

      vertices, faces = get_volume( v, remote_instance )
      if type(volumes) == type(list):
         color = volumes[v]
      else:
         color = (220,220,220)

      if vertices:
         trace_data.append(  go.Mesh3d(
                              x = [ -v[0] for v in vertices ],
                                y = [ -v[2] for v in vertices ], #y and z are switched
                                z = [ -v[1] for v in vertices ],

                                i = [ f[0] for f in faces ],
                                j = [ f[1] for f in faces ],
                                k = [ f[2] for f in faces ],

                                opacity = .5,
                                color = 'rgb' + str(color),
                                name= v,
                                showlegend = True,
                                hoverinfo='none'
                        )
                     )

   layout = dict(
       width= fig_width,
       height= fig_height,
       autosize=fig_autosize,
       title= pl_title,
       scene=dict(
           xaxis=dict(
               gridcolor='rgb(255, 255, 255)',
               zerolinecolor='rgb(255, 255, 255)',
               showbackground=True,
               backgroundcolor='rgb(240, 240, 240)',
               range = ax_limits['x']

           ),
           yaxis=dict(
               gridcolor='rgb(255, 255, 255)',
               zerolinecolor='rgb(255, 255, 255)',
               showbackground=True,
               backgroundcolor='rgb(240, 240, 240)',
               range = ax_limits['y']
           ),
           zaxis=dict(
               gridcolor='rgb(255, 255, 255)',
               zerolinecolor='rgb(255, 255, 255)',
               showbackground=True,
               backgroundcolor='rgb(240, 240, 240)',
               range = ax_limits['z']
           ),
           camera=dict(
               up=dict(
                   x=0,
                   y=0,
                   z=1
               ),
               eye=dict(
                   x=-1.7428,
                   y=1.0707,
                   z=0.7100,
               )
           ),
           aspectratio = dict( x=1, y=1, z=1 ),
           aspectmode = 'manual'
       ),
   )

   #Neeed to remove width and height to make autosize actually matter
   if fig_autosize:
      layout.pop('width')
      layout.pop('height')

   fig = dict(data=trace_data, layout=layout)

   module_logger.info('Done. Plotted %i nodes and %i connectors' % ( sum([ n.nodes.shape[0] for n in skdata.itertuples() ]), sum([ n.connectors.shape[0] for n in skdata.itertuples() if 'connectors' in args]) )  )
   module_logger.info('Use plotly.offline.plot(fig, filename="3d_plot.html") to plot. Optimised for Google Chrome.')

   return fig

def plot_network( *args, **kwargs ):
   """
   Uses python-igraph to generate a plot in plotly

   Parameters:
   ----------
   USE EITHER <skids>, <adj_mat> or <graph> to specify what to plot

   skids :           list
                     list of CATMAID skeleton ids
   adj_mat :         Pandas dataframe
                     adjacency matrix, e.g. from cluster.create_adjacency_matrix()
   g :               igraph object
                     igraph representation of the network
   remote_instance : CATMAID remote instance
                     need to pass this too if you are providing only skids

   Other (optional arguments):
   layout :          string (default = 'fr' -> Fruchterman-Reingold)
                     see http://igraph.org/python/doc/tutorial/tutorial.html for
                     available layouts
   syn_cutoff :      int (default = False)
                     if provided, connections will be maxed at this value
   syn_threshold :   int (default = 0)
                     edges with less connections are ignored
   groups :          dict
                     Use to group neurons. Format: { 'Group A' : [skid1, skid2, ..], }
   colormap :        Set to 'random' (default) to assign random colors to neurons
                     Use single tuple to assign the same color to all neurons:
                     ( (0-255,0-255,0-255) )
                     Use dict to assign rgb colors to individual neurons:
                     { neuron1 : (0-255,0-255,0-255), .. }
   label_nodes :     boolean (default = True)
                     plot neuron labels
   label_edges :     boolean (default = True)
                     plot edge labels
   node_hover_text : dict
                     provide custom hover text for neurons:
                     { neuron1 : 'hover text', .. }
   node_size :       node sizes
                     use int to set node size once
                     use dict to set size for individual nodes
                     { neuron1 : 20, neuron2 : 5,  .. }

   Returns:
   --------
   fig:           dictionary to generate plotly figure
                  use for example:
                  plotly.offline.plot(fig, filename='plot.html')
                  to generate html file and open it webbrowser
   """

   skids = kwargs.get('skids', [] )
   adj_mat = kwargs.get('adj_mat', pd.DataFrame() )
   g = kwargs.get('g', None )
   remote_instance = kwargs.get('remote_instance', [] )
   layout = kwargs.get('layout', 'fr' )

   syn_cutoff = kwargs.get('syn_cutoff', None )
   syn_threshold = kwargs.get('syn_threshold', 1 )
   groups = kwargs.get('groups', [] )
   colormap =  kwargs.get('colormap', 'random' )

   label_nodes = kwargs.get('label_nodes', True )
   label_edges = kwargs.get('label_edges', True )

   node_labels = kwargs.get('node_labels', [] )
   node_hover_text = kwargs.get('node_hover_text', [] )
   node_size = kwargs.get('node_size', 20 )

   fig_width = kwargs.get('fig_width', 1440)
   fig_height = kwargs.get('fig_height', 960)
   fig_autosize = kwargs.get('fig_autosize', False)


   if adj_mat.empty and not skids and not g:
      module_logger.error('You need to provide either a list of skeleton IDs and a CATMAID remote_instance OR an adjacency matrix. See help(plot.plot_network).')
      return
   elif adj_mat.empty and not g:
      adj_mat = clustmaid.create_adjacency_matrix( skids,
                                                   skids,
                                                   remote_instance,
                                                   syn_cutoff = syn_cutoff,
                                                   syn_threshold = syn_threshold,
                                                   row_groups = groups, #This is where the magic happens
                                                   col_groups = groups #This is where the magic happens
                                                   )
   if not g:
      #Generate igraph object and apply layout
      g = igraph_catmaid.igraph_from_adj_mat( adj_mat, syn_threshold = syn_threshold, syn_cutoff = syn_cutoff )

   try:
      layout = g.layout( layout, weights = g.es['weight'] )
   except:
      layout = g.layout( layout )
   pos = layout.coords

   #Prepare colors
   if type(colormap) == type(dict()):
      colors = colormap
      #Give grey color to neurons that are not in colormap
      colors.update( { v['label'] : (.5,.5,.5) for i,v in enumerate( g.vs ) if v['label'] not in colormap }  )
   elif colormap == 'random':
      c = random_colors (len( g.vs ), color_space='RGB', color_range = 255)
      colors = { v['label'] : c[i] for i,v in enumerate( g.vs ) }
   elif type(colormap) == type(tuple()):
      colors = { v['label'] : colormap for i,v in enumerate( g.vs ) }
   else:
      module_logger.error('I dont understand the colors you have provided. Please, see help(plot.plot_network).')
      return None

   edges = []
   annotations = []
   for e in g.es:
      width = 2 +  5 * round( e['weight'] )/max( g.es['weight'] )

      edges.append (
                     go.Scatter( dict(
                                 x = [ pos[e.source][0]  , pos[ e.target ][0], None ],
                                 y = [ pos[e.source][1]  , pos[ e.target ][1], None ],
                                 mode = 'lines',
                                 hoverinfo = 'text',
                                 text = str( e['weight'] ),
                                 line = dict(
                                             width = width,
                                             color = 'rgb(255,0,0)'
                                             )
                                 ))
                  )

      annotations.append( dict(
                           x=pos[e.target][0],
                           y=pos[e.target][1],
                           xref='x',
                           yref='y',
                           showarrow=True,
                           align='center',
                           arrowhead=2,
                           arrowsize=.5,
                           arrowwidth=width,
                           arrowcolor='#636363',
                           ax=pos[ e.source ][0],
                           ay=pos[ e.source ][1],
                           axref='x',
                           ayref='y',
                           standoff = 10
                       ) )

      if label_edges:
         center_x = (pos[e.target][0] - pos[ e.source ][0])/2 + pos[ e.source ][0]
         center_y = (pos[e.target][1] - pos[ e.source ][1])/2 + pos[ e.source ][1]

         if e['weight'] == syn_cutoff:
            t = '%i +' % int(e['weight'])
         else:
            t = str( int( e['weight'] ) )

         annotations.append( dict(
                                 x=center_x,
                                 y=center_y,
                                 xref='x',
                                 yref='y',
                                 showarrow=False,
                                 text = t,
                                 font= dict(color= 'rgb(0,0,0)' , size= 10 )
                               )

                        )


   #Prepare hover text
   if not node_hover_text:
      node_hover_text = { n['label'] : n['label'] for n in g.vs }
   else:
      #Make sure all nodes are represented
      node_hover_text.update( { n['label'] : n['label'] for n in g.vs if n['label'] not in node_hover_text } )

   #Prepare node sizes
   if type(node_size) == type(dict()):
      n_size = [ node_size[ n['label'] ] for n in g.vs  ]
   else:
      n_size = node_size

   nodes = go.Scatter( dict(
                        x = [ e[0] for e in pos ],
                        y = [ e[1] for e in pos ],
                        text = [ node_hover_text[ n['label'] ] for n in g.vs ],
                        mode = 'markers',
                        hoverinfo = 'text',
                        marker = dict(
                                    size = n_size,
                                    color = [ 'rgb' + str( tuple( colors[ n['label'] ] ) ) for n in g.vs ]
                                    )
                        ))

   if label_nodes:
      annotations += [ dict(
                              x = e[0],
                              y = e[1],
                              xref='x',
                              yref='y',
                              text = g.vs[i]['label'],
                              showarrow = False,
                              font= dict(color= 'rgb(0,0,0)' , size= 12 )
                        )
                        for i,e in enumerate(pos) ]

   layout = dict(
       width= fig_width,
       height= fig_height,
       showlegend=False,
       annotations = annotations,
       xaxis=dict(
            showline = False,
            zeroline = False,
            showgrid = False,
            showticklabels = False,
            title = ''
        ),
       yaxis=dict(
            showline = False,
            zeroline = False,
            showgrid = False,
            showticklabels = False,
            title = ''
        ),
       hovermode = 'closest'
   )

   data = go.Data( [ nodes ] )

   fig = go.Figure( data = data, layout = layout )

   module_logger.info('Done! Use e.g. plotly.offline.plot(fig, filename="network_plot.html") to plot.')

   return fig

if __name__ == '__main__':
   """
   FOR DEBUGGING/TESTING
   """
   module_logger.setLevel(logging.DEBUG)

   import sys
   sys.path.append('/Users/philipps/OneDrive/Cloudbox/Python')
   from connect_catmaid import connect_adult_em

   remote_instance = connect_adult_em()

   skdata = get_3D_skeleton( [27295] , remote_instance )[0]

   LH, rest = morpho.cut_neuron2 ( skdata , 2816697 )

   fig = plot3d( ['27295-LH','27295-rest'], remote_instance, *['connectors'], skdata = [ LH, rest ], names={ '27295-LH' : '27295-LH' ,'27295-rest': '27295-rest' }, volumes = ['v13.LH_R'] )

   pyoff.plot(fig, filename='3d_plot_test.html')
